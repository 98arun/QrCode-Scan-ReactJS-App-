{"version":3,"sources":["App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","container","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","App","useState","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","classes","qrRef","useRef","_generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","variant","onClick","href","download","src","alt","current","openImageDialog","ref","delay","style","width","onError","error","onScan","result","legacyMode","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.24709343.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  makeStyles,\n  Grid,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport QRCode from \"qrcode\";\nimport QrReader from \"react-qr-reader\";\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [scanResultFile, setScanResultFile] = useState(\"\");\n  const [scanResultWebCam, setScanResultWebCam] = useState(\"\");\n  const classes = useStyles();\n  const qrRef = useRef(null);\n\n  const _generateQrCode = async () => {\n    try {\n      const response = await QRCode.toDataURL(text);\n      setImageUrl(response);\n    } catch (error) {\n      console.log(\"LN27 error in generateQrCode\", error);\n    }\n  };\n\n  const _handleErrorFile = (error) => {\n    console.log(\"LN32 error in Scan QrCode\", error);\n  };\n\n  const _handleScanFile = (result) => {\n    if (!result) {\n      return;\n    }\n    setScanResultFile(result);\n  };\n\n  const _onScanFile = () => {\n    qrRef.current.openImageDialog();\n  };\n\n  const _handleErrorWebCam = (error) => {\n    console.log(\"LN47 error in QrCode Scan by WebCam\", error);\n  };\n\n  const _handleScanWebCam = (result) => {\n    if (!result) {\n      return;\n    }\n    setScanResultWebCam(result);\n  };\n  return (\n    <Container className={classes.container}>\n      <Card>\n        <h2 className={classes.title}>\n          Generate, Download & Scan QRCode with ReactJS\n        </h2>\n        <CardContent>\n          <Grid container spacing={2}>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <TextField\n                label=\"Enter Text Here\"\n                onChange={(e) => setText(e.target.value)}\n              />\n              <Button\n                className={classes.btn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => _generateQrCode()}\n              >\n                Generate\n              </Button>\n              <br />\n              <br />\n              <br />\n              {imageUrl ? (\n                <a href={imageUrl} download>\n                  <img src={imageUrl} alt=\"img\" />\n                </a>\n              ) : null}\n            </Grid>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <Button\n                className={classes.btn}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={_onScanFile}\n              >\n                Scan Downloaded QrCode\n              </Button>\n              <QrReader\n                ref={qrRef}\n                delay={300}\n                style={{ width: \"100%\" }}\n                onError={_handleErrorFile}\n                onScan={_handleScanFile}\n                legacyMode\n              />\n              <h3>Scanned Downloaded Code Details: {scanResultFile}</h3>\n            </Grid>\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\n              <h3>QrCode Scan by WebCam</h3>\n              <QrReader\n                delay={300}\n                style={{ width: \"100%\" }}\n                onError={_handleErrorWebCam}\n                onScan={_handleScanWebCam}\n              />\n              <h3>Scanned By WebCam Code Details: {scanResultWebCam}</h3>\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    marginTop: 10,\n  },\n  title: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    background: \"#000\",\n    color: \"#fff\",\n    padding: 20,\n  },\n  btn: {\n    marginTop: 10,\n    marginBottom: 20,\n  },\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}